---
import BaseHead from '@/components/BaseHead.astro';
import Header from '@/components/Header.astro';
import Footer from '@/components/Footer.astro';
import {SITE_TITLE, SITE_DESCRIPTION} from '@/consts';
import { getAllPostsPaginated, POSTS_PER_PAGE } from '@/lib/posts';
import UnifiedPostCard from "@/components/UnifiedPostCard.astro";
import Pagination from "@/components/Pagination.astro";

export async function getStaticPaths() {
  // 全記事数を取得してページ数を計算
  const firstPagePosts = await getAllPostsPaginated({ page: 1, perPage: POSTS_PER_PAGE });
  const totalPages = firstPagePosts.totalPages;
  
  // 2ページ目以降のパスを生成（1ページ目は /blog で処理）
  const paths = [];
  for (let page = 2; page <= totalPages; page++) {
    paths.push({
      params: { page: page.toString() },
      props: { page }
    });
  }
  
  return paths;
}

interface Props {
  page: number;
}

const { page } = Astro.props;
const paginatedPosts = await getAllPostsPaginated({ 
  page, 
  perPage: POSTS_PER_PAGE 
});
---

<!doctype html>
<html lang="en">
<head>
    <BaseHead title={`ブログ - ページ ${page} | ${SITE_TITLE}`} description={SITE_DESCRIPTION}/>
</head>
<body>
<Header/>
<main>
    <section>
        {
            paginatedPosts.data.map((post) => (
                    <UnifiedPostCard {...post}/>
            ))
        }
    </section>
    <Pagination 
        currentPage={paginatedPosts.currentPage}
        totalPages={paginatedPosts.totalPages}
        baseUrl="/blog"
    />
</main>
<Footer/>
</body>
</html>

<style>
    section {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1rem;
        max-width: 90rem;
        margin: 5rem auto;
        padding: 2rem;
    }
</style>